<!-- %W  usage.xml                  GAP documentation                 Gabor P. Nagy -->
<!-- %H                                                                             -->
<!-- %Y  Copyright (C) 2019, Bolyai Institute of the University of Szeged (Hungary) -->


<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
<Chapter Label="HERmitian Usage">
<Heading>How to use the package</Heading>

<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
<Section Label="Curves">
<Heading>Hermitian curves</Heading>

The following functions are available:

<#Include Label="IsHermitian_Curve">

<#Include Label="Hermitian_Curve">

<#Include Label="IndeterminatesOfHermitian_Curve">

<#Include Label="UnderlyingField_Curve">

<#Include Label="RandomPlaceOfGivenDegreeOfHermitian_Curve">

<Example>
gap&gt; Y:=Indeterminate(GF(9),"Y");
Y
gap&gt; C:=Hermitian_Curve(GF(9),Y);
&lt;GZ curve over GF(9) with indeterminate Y&gt;
gap&gt; aut:=AutomorphismGroup(C);
&lt;group of GZ curve automorphisms of size 720&gt;
gap&gt; Random(aut);
Hermitian_CurveAut([ [ Z(3)^0, Z(3^2)^3 ], [ Z(3^2)^5, Z(3) ] ])
</Example>

<#Include Label="FrobeniusAutomorphismOfHermitian_Curve">

<#Include Label="IsHermitian_CurveAutomorphism">

<#Include Label="Hermitian_CurveAutomorphism">

<#Include Label="Hermitian_CurveAutGroup">



</Section>

<Section Label="Divisors">
<Heading>Hermitian divisors</Heading>

The following functions are available:

<#Include Label="IsHermitian_Divisor">

<#Include Label="Hermitian_DivisorConstruct">

<#Include Label="Hermitian_Divisor">

<#Include Label="Hermitian_Place">

<#Include Label="ZeroHermitian_Divisor">

<#Include Label="IsRationalHermitian_Divisor">

<#Include Label="UnderlyingField_Div">

<#Include Label="Support">

<#Include Label="Valuation">

<#Include Label="PrincipalHermitian_Divisor">

<#Include Label="SupremumHermitian_Divisor">

<#Include Label="InfimumHermitian_Divisor">

<#Include Label="PositivePartOfHermitian_Divisor">

<#Include Label="NegativePartOfHermitian_Divisor">

<Example>
gap&gt; p1:=Hermitian_Place(C,infinity);
&lt;GZ divisor with support of length 1 over indeterminate Y&gt;
gap&gt; p2:=Hermitian_Place(C,Z(3));
&lt;GZ divisor with support of length 1 over indeterminate Y&gt;
gap&gt; d:=3*p1-4*p2;
&lt;GZ divisor with support of length 2 over indeterminate Y&gt;
gap&gt; Support(d);
[ infinity, Z(3) ]
gap&gt; UnderlyingField(d);
GF(3^2)
gap&gt; Zero(d);
&lt;GZ divisor with support of length 0 over indeterminate Y&gt;
gap&gt; Characteristic(d);
3
gap&gt;
gap&gt; d:=Hermitian_Divisor(C,[Z(27)^2,Z(3),infinity],[5,-1,2]);
&lt;GZ divisor with support of length 3 over indeterminate Y&gt;
gap&gt; Valuation(Z(3),d);
-1
gap&gt; Valuation(Z(3)^2,d);
0
gap&gt;
gap&gt; fr:=AC_FrobeniusAutomorphism(9);
AC_FrobeniusAutomorphism(3^2)
gap&gt; d^fr;
&lt;GZ divisor with support of length 3 over indeterminate Y&gt;
gap&gt; Support(d^fr);
[ infinity, Z(3), Z(3^3)^18 ]
gap&gt; Support(d);
[ infinity, Z(3), Z(3^3)^2 ]
gap&gt;
gap&gt; rf:=Y^8-1;
Y^8-Z(3)^0
gap&gt; List(GF(9),u-&gt;Valuation(u,rf));
[ 0, 1, 1, 1, 1, 1, 1, 1, 1 ]
gap&gt; List(GF(9),u-&gt;Valuation(u,One(Y)));
[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
gap&gt; List(GF(9),u-&gt;Valuation(u,Zero(Y)));
[ -infinity, -infinity, -infinity, -infinity, -infinity, -infinity,
  -infinity, -infinity, -infinity ]
gap&gt;
gap&gt;
gap&gt; List(GF(3),u-&gt;Valuation(u,One(Y)));
[ 0, 0, 0 ]
gap&gt; List(GF(3),u-&gt;Valuation(u,Zero(Y)));
[ -infinity, -infinity, -infinity ]
</Example>

</Section>


<Section Label="RRspaces">
<Heading>Hermitian Riemann-Roch spaces</Heading>

<#Include Label="Hermitian_RiemannRochSpaceBasis">

<Example>
gap&gt; a:=RandomPlaceOfHermitian_Curve(C,4);
&lt;GZ divisor with support of length 1 over indeterminate Y&gt;
gap&gt; fr:=FrobeniusAutomorphismOfHermitian_Curve(C);
AC_FrobeniusAutomorphism(3^2)
gap&gt; d:=Sum(AC_FrobeniusAutomorphismOrbit(fr,a));
&lt;GZ divisor with support of length 4 over indeterminate Y&gt;
gap&gt; IsRationalHermitian_Divisor(d);
true
gap&gt;
gap&gt; Hermitian_RiemannRochSpaceBasis(3*d);
[ Z(3)^0/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2),
  Y/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2),
  Y^2/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2),
  Y^3/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2),
  Y^4/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2),
  Y^5/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2),
  Y^6/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2),
  Y^7/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2),
  Y^8/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2),
  Y^9/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2),
  Y^10/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2),
  Y^11/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2),
  Y^12/(Y^12+Y^9+Z(3^2)^2*Y^6+Z(3^2)^3*Y^3+Z(3^2)^2) ]
gap&gt; ForAll(last,x-&gt;x=x^fr);
true
</Example>

</Section>

<Section Label="AGcodes">
<Heading>Hermitian AG-codes</Heading>

The following functions are available:

<#Include Label="IsHermitian_Code">

<#Include Label="GeneratorMatrixOfFunctionalHermitian_CodeNC">

<#Include Label="Hermitian_FunctionalCode">

<#Include Label="Hermitian_DifferentialCode">

<#Include Label="Length_Code">

<#Include Label="GeneratorMatrixOfHermitian_Code">

<#Include Label="DesignedMinimumDistance">

<Example>
gap&gt; code:=Hermitian_FunctionalCode(d);
&lt;[9,5] Hermitian AG-code over GF(3^2)&gt;
gap&gt; Print(code);
Hermitian_FunctionalCode(Hermitian_Divisor(Hermitian_Curve(GF(9),Y),
[ Z(3^8)^302, Z(3^8)^2718, Z(3^8)^3678, Z(3^8)^4782 ],
[ 1, 1, 1, 1 ]),Hermitian_Divisor(Hermitian_Curve(GF(9),Y),
[ 0*Z(3), Z(3)^0, Z(3), Z(3^2), Z(3^2)^2, Z(3^2)^3, Z(3^2)^5,
  Z(3^2)^6, Z(3^2)^7 ],[ 1, 1, 1, 1, 1, 1, 1, 1, 1 ]))
gap&gt; DesignedMinimumDistance(code);
5
</Example>

<#Include Label="Hermitian_DecodeToCodeword">

<Example>
gap&gt; q:=5^3;
125
gap&gt; # construct the curve and the divisors
gap&gt; Y:=Indeterminate(GF(q),"Y");
Y
gap&gt; C:=Hermitian_Curve(GF(q),Y);
&lt;GZ curve over GF(125) with indeterminate Y&gt;
gap&gt; P_infty:=Hermitian_1PointDivisor(C,infinity);
&lt;GZ divisor with support of length 1 over indeterminate Y&gt;
gap&gt;
gap&gt; fr:=FrobeniusAutomorphismOfHermitian_Curve(C);
AC_FrobeniusAutomorphism(5^3)
gap&gt; P4:=Sum(AC_FrobeniusAutomorphismOrbit(fr,RandomPlaceOfHermitian_Curve(C,4)));
&lt;GZ divisor with support of length 4 over indeterminate Y&gt;
gap&gt; G:=5*P4+7*P_infty;
&lt;GZ divisor with support of length 5 over indeterminate Y&gt;
gap&gt; Degree(G);
27
gap&gt;
gap&gt; len:=90;
90
gap&gt; D:=Sum([1..len],i-&gt;Hermitian_1PointDivisor(C,Elements(GF(q))[i]));
&lt;GZ divisor with support of length 90 over indeterminate Y&gt;
gap&gt;
gap&gt; # construct the AG differential code
gap&gt; agcode:=Hermitian_DifferentialCode(G,D);
&lt;[90,62] Hermitian AG-code over GF(5^3)&gt;
gap&gt; DesignedMinimumDistance(agcode);
29
gap&gt; Length(agcode)-Degree(G)-1;
62
gap&gt;
gap&gt; # test codeword generation
gap&gt; t:=Int((DesignedMinimumDistance(agcode)-1)/2);
14
gap&gt; sent:=Random(agcode);;
gap&gt; err:=RandomVectorOfGivenWeight(GF(q),Length(agcode),t);;
gap&gt; received:=sent+err;;
gap&gt;
gap&gt; # decoding
gap&gt; sent_decoded:=Hermitian_DecodeToCodeword(agcode,received);
&lt;cvec over GF(5,3) of length 90&gt;
gap&gt; sent=sent_decoded;
true
</Example>

</Section>


<Section Label="Utilities">
<Heading>Utilities for Hermitian AG-codes</Heading>

<#Include Label="RestrictVectorSpace">

<#Include Label="UPolCoeffsToSmallFieldNC">

<#Include Label="RandomErrorVectors">

</Section>
</Chapter>


<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
<!-- %% -->
<!-- %E -->
